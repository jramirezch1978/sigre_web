import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatIconModule } from '@angular/material/icon';
import { TimeService, ServerTimeResponse } from '../../services/time.service';
import { ClockService } from '../../services/clock.service';
import { Subscription } from 'rxjs';

/**
 * ==================================================================================
 * üïê COMPONENTE DE RELOJ CON L√ìGICA SIMPLE Y ROBUSTA
 * ==================================================================================
 * 
 * ‚ö†Ô∏è  ADVERTENCIA: NO TOCAR ESTA L√ìGICA NUNCA M√ÅS - EST√Å PERFECTA Y FUNCIONA
 * ‚ö†Ô∏è  Cualquier cambio puede romper el comportamiento cr√≠tico del sistema
 * 
 * üìã REQUERIMIENTOS CUMPLIDOS:
 * ============================
 * 1. ‚è∞ Reloj se actualiza cada segundo SIEMPRE (nunca se congela)
 * 2. üéØ Si hay conexi√≥n: consulta servidor directamente cada segundo
 * 3. üîÑ Si no hay conexi√≥n: usa hora del dispositivo cada segundo  
 * 4. üîÑ Reconexi√≥n autom√°tica cada 10 segundos en segundo plano
 * 5. üü¢/üî¥ Indicador visual claro (verde=servidor, rojo=local)
 * 6. üö´ Sin c√°lculos matem√°ticos complejos - consulta directa siempre
 * 
 * üéØ CASOS DE USO RESUELTOS:
 * ==========================
 * - Marcaciones precisas: Usa hora del servidor cuando disponible
 * - Disponibilidad: Funciona siempre aunque servidor est√© ca√≠do
 * - Experiencia usuario: Reloj nunca se detiene, indicadores claros
 * - Recuperaci√≥n autom√°tica: Se reconecta solo sin intervenci√≥n
 * 
 * üîß ARQUITECTURA DEL SISTEMA:
 * ============================
 * - Timer Principal: Actualiza reloj cada 1 segundo (SIEMPRE activo)
 * - Timer Reconexi√≥n: Solo activo cuando desconectado (cada 10 segundos)
 * - Estado Simple: isServerConnected (true/false)
 * - Sin suscripciones complejas, sin c√°lculos de tiempo transcurrido
 * 
 * üìä FLUJO DE ESTADOS:
 * ====================
 * [INICIO] ‚Üí Intenta conectar servidor
 *     ‚Üì
 * [CONECTADO] ‚Üí Timer cada 1s consulta servidor ‚Üí Si error ‚Üí [DESCONECTADO]
 *     ‚Üì
 * [DESCONECTADO] ‚Üí Timer cada 1s usa hora local + Timer cada 10s intenta reconectar
 *     ‚Üì
 * [RECONECTADO] ‚Üí Vuelve a [CONECTADO] y detiene timer reconexi√≥n
 * 
 * üö® COMPORTAMIENTOS CR√çTICOS (NO CAMBIAR):
 * =========================================
 * - El reloj NUNCA se debe detener o congelar
 * - Reconexi√≥n debe ser autom√°tica y transparente
 * - Cambio de estado debe ser inmediato (sin demoras)
 * - Indicadores visuales deben cambiar instant√°neamente
 * - No hacer m√∫ltiples intentos simult√°neos de conexi√≥n
 * 
 * üîç LOGS PARA DEBUGGING:
 * =======================
 * - Inicio de timers y componente
 * - Cambios de estado (conectado/desconectado)  
 * - Intentos de conexi√≥n y reconexi√≥n
 * - Limpieza de recursos
 */
@Component({
  selector: 'app-clock',
  standalone: true,
  imports: [CommonModule, MatCardModule, MatIconModule],
  templateUrl: './clock.component.html',
  styleUrls: ['./clock.component.scss']
})
export class ClockComponent implements OnInit, OnDestroy {
  
  // ==================================================================================
  // üìä VARIABLES DE ESTADO DEL COMPONENTE
  // ==================================================================================
  
  /**
   * ‚è∞ HORA ACTUAL MOSTRADA AL USUARIO
   * - Se actualiza cada segundo SIEMPRE (nunca null, nunca se detiene)
   * - Proviene del servidor si est√° conectado, del dispositivo si no
   * - Es la √∫nica fuente de verdad para el template HTML
   * - CR√çTICO: Nunca permitir que sea undefined o se detenga
   */
  currentTime: Date = new Date();
  
  /**
   * üîÑ TIMER PRINCIPAL (CADA 1 SEGUNDO) - EL CORAZ√ìN DEL SISTEMA
   * - SIEMPRE est√° activo desde ngOnInit hasta ngOnDestroy
   * - Responsable de actualizar currentTime cada segundo
   * - NO TOCAR: Es lo que mantiene el reloj funcionando visualmente
   * - Se ejecuta independientemente del estado de conexi√≥n
   */
  private clockTimer: any;
  
  /**
   * üîÑ TIMER DE RECONEXI√ìN (CADA 10 SEGUNDOS) - RECUPERACI√ìN AUTOM√ÅTICA  
   * - Solo activo cuando isServerConnected = false
   * - Se detiene autom√°ticamente cuando se reconecta
   * - Funciona en segundo plano sin interferir con el reloj visual
   * - IMPORTANTE: Solo se inicia cuando hay una desconexi√≥n
   */
  private reconnectTimer: any;
  
  /**
   * üü¢/üî¥ ESTADO DE CONEXI√ìN AL SERVIDOR (√öNICA FUENTE DE VERDAD)
   * - true = Servidor disponible, usar hora del servidor cada segundo
   * - false = Servidor no disponible, usar hora del dispositivo cada segundo  
   * - Controla qu√© icono mostrar (verde/rojo) y qu√© fuente de tiempo usar
   * - Se actualiza inmediatamente cuando hay cambios de conectividad
   * - P√öBLICO: El template HTML lo usa para mostrar indicadores visuales
   */
  isServerConnected = false;
  
  /**
   * üö´ FLAG DE PROTECCI√ìN CONTRA CONEXIONES M√öLTIPLES
   * - Evita que se hagan varios intentos de conexi√≥n al mismo tiempo
   * - Se activa durante attemptServerConnection() y se desactiva al terminar
   * - Previene condiciones de carrera y requests duplicados
   * - CR√çTICO: Mantiene la estabilidad del sistema de conexi√≥n
   */
  private isAttemptingConnection = false;

  constructor(
    private timeService: TimeService,
    private clockService: ClockService  // ‚Üê Servicio centralizado de tiempo
  ) {}

  // ==================================================================================
  // üöÄ INICIALIZACI√ìN DEL COMPONENTE (PUNTO DE ENTRADA PRINCIPAL)
  // ==================================================================================
  
  /**
   * üéØ M√âTODO DE INICIALIZACI√ìN - CONFIGURA TODO EL SISTEMA DEL RELOJ
   * 
   * ORDEN DE EJECUCI√ìN CR√çTICO (NO CAMBIAR):
   * ========================================
   * 1. Iniciar timer principal (reloj visual cada 1 segundo)
   * 2. Intentar primera conexi√≥n al servidor
   * 
   * ‚ö†Ô∏è POR QU√â ESTE ORDEN:
   * - Timer principal se inicia PRIMERO para que el reloj nunca se vea vac√≠o
   * - Conexi√≥n al servidor es secundaria, el reloj debe funcionar siempre
   * - Si servidor no responde, el reloj ya est√° funcionando con hora local
   * 
   * üìù COMPORTAMIENTO ESPERADO:
   * - Usuario ve inmediatamente un reloj funcionando (nunca pantalla en blanco)
   * - Icono puede empezar rojo y cambiar a verde si servidor conecta
   * - En caso de falla total del servidor, el reloj sigue funcionando
   */
  ngOnInit() {
    console.log('üïê ========== INICIANDO COMPONENTE RELOJ ==========');
    console.log('üîß Configurando sistema de actualizaci√≥n cada segundo + reconexi√≥n cada 10s');
    
    // PASO 1: CR√çTICO - Iniciar timer principal ANTES que cualquier conexi√≥n
    // Esto garantiza que el reloj se vea funcionando inmediatamente
    this.startMainClock();
    
    // PASO 2: Intentar conectar al servidor (puede fallar sin problemas)
    // Si falla, el reloj ya est√° funcionando con hora local desde PASO 1
    this.attemptServerConnection();
  }

  // ==================================================================================
  // ‚è∞ TIMER PRINCIPAL - EL CORAZ√ìN QUE MANTIENE EL RELOJ FUNCIONANDO
  // ==================================================================================
  
  /**
   * üîÑ INICIAR TIMER PRINCIPAL - LA FUNCI√ìN M√ÅS CR√çTICA DEL SISTEMA
   * 
   * üéØ RESPONSABILIDAD:
   * ==================
   * - Mantener el reloj visual actualiz√°ndose cada segundo SIN EXCEPCI√ìN
   * - Funciona independientemente del estado de conexi√≥n al servidor
   * - Es lo que garantiza que el usuario SIEMPRE vea un reloj funcionando
   * 
   * ‚ö†Ô∏è ADVERTENCIAS CR√çTICAS:
   * =========================
   * - NUNCA modificar el intervalo de 1000ms (1 segundo)
   * - NUNCA agregar condiciones que puedan detener este timer
   * - NUNCA hacer que dependa del estado de conexi√≥n al servidor
   * - El timer debe correr desde ngOnInit() hasta ngOnDestroy()
   * 
   * üõ†Ô∏è FUNCIONAMIENTO:
   * ==================
   * 1. Limpia cualquier timer previo (prevenci√≥n de memory leaks)
   * 2. Inicia nuevo timer que ejecuta updateCurrentTime() cada segundo
   * 3. Ejecuta updateCurrentTime() inmediatamente (no espera 1 segundo)
   * 
   * üìä M√âTRICAS IMPORTANTES:
   * =======================
   * - Frecuencia: Exactamente cada 1000ms (1 segundo)
   * - Inicio: Inmediato (no hay delay inicial)
   * - Duraci√≥n: Desde ngOnInit hasta ngOnDestroy
   * - Independencia: No depende de conexiones externas
   */
  private startMainClock() {
    // PASO 1: Limpiar timer previo si existe (prevenci√≥n de memory leak)
    if (this.clockTimer) {
      clearInterval(this.clockTimer);
      console.log('üßπ Timer principal previo limpiado');
    }
    
    // PASO 2: Crear nuevo timer que actualiza cada segundo
    this.clockTimer = setInterval(() => {
      this.updateCurrentTime(); // ‚Üê Esta funci√≥n decide si usar servidor o dispositivo
    }, 1000); // ‚Üê 1000ms = 1 segundo EXACTO, NO CAMBIAR
    
    // PASO 3: Primera actualizaci√≥n inmediata (no esperar 1 segundo)
    this.updateCurrentTime();
    console.log('‚úÖ Timer principal INICIADO - reloj actualiz√°ndose cada segundo');
  }

  // ==================================================================================
  // üéØ L√ìGICA DE DECISI√ìN - SERVIDOR VS DISPOSITIVO (EJECUTADA CADA SEGUNDO)
  // ==================================================================================
  
  /**
   * ü§î FUNCI√ìN DE DECISI√ìN PRINCIPAL - ELIGE FUENTE DE TIEMPO CADA SEGUNDO
   * 
   * üìã L√ìGICA SIMPLE (SIN COMPLICACIONES):
   * =====================================
   * - Si isServerConnected = true ‚Üí Consultar servidor ahora
   * - Si isServerConnected = false ‚Üí Usar hora del dispositivo ahora
   * - NO hay c√°lculos matem√°ticos, NO hay cache, NO hay complejidad
   * 
   * ‚ö†Ô∏è PRINCIPIOS FUNDAMENTALES:
   * ============================
   * - Simplicidad total: Solo 2 caminos posibles (servidor O dispositivo)
   * - Consulta directa: Cada segundo decide de nuevo qu√© hacer
   * - Sin memoria: No recuerda consultas anteriores ni hace c√°lculos
   * - Robustez: Si servidor falla, cambia inmediatamente a dispositivo
   * 
   * üîÑ FLUJO DE EJECUCI√ìN:
   * =====================
   * [Timer llama cada 1s] ‚Üí updateCurrentTime() ‚Üí 
   *   ‚îú‚îÄ‚îÄ Si conectado ‚Üí getServerTimeNow() ‚Üí Actualiza currentTime con servidor
   *   ‚îî‚îÄ‚îÄ Si desconectado ‚Üí new Date() ‚Üí Actualiza currentTime con dispositivo
   * 
   * üõ†Ô∏è MANEJO DE ERRORES:
   * =====================
   * - Si getServerTimeNow() falla ‚Üí Autom√°ticamente cambia a modo dispositivo
   * - No hay retries ni reintentos ‚Üí El sistema de reconexi√≥n maneja eso
   * - Garantiza que currentTime SIEMPRE se actualice (nunca se queda colgado)
   */
  private updateCurrentTime() {
    if (this.isServerConnected) {
      // üü¢ MODO SERVIDOR: Consulta directa al servidor AHORA
      // Si falla, getServerTimeNow() autom√°ticamente cambia a modo dispositivo
      this.getServerTimeNow();
    } else {
      // üî¥ MODO DISPOSITIVO: Hora local del dispositivo AHORA
      // Simple, r√°pido, siempre funciona, sin dependencias externas
      this.currentTime = new Date();
      
      // ‚úÖ ACTUALIZAR SERVICIO CENTRALIZADO - FUENTE √öNICA DE VERDAD
      // Todos los otros componentes obtendr√°n esta hora desde ClockService
      this.clockService.updateCurrentTime(this.currentTime);
      this.clockService.updateServerConnectionStatus(false, 'Usando hora del dispositivo');
    }
  }

  // ==================================================================================
  // üåê CONSULTA DIRECTA AL SERVIDOR (SOLO CUANDO EST√Å CONECTADO)
  // ==================================================================================
  
  /**
   * üìû CONSULTAR SERVIDOR DIRECTAMENTE - SIN CACHE, SIN C√ÅLCULOS
   * 
   * üéØ PROP√ìSITO:
   * =============
   * - Obtener hora exacta del servidor EN ESTE MOMENTO (no cache)
   * - Usada solo cuando isServerConnected = true
   * - Consulta HTTP directa cada segundo para m√°xima precisi√≥n
   * 
   * ‚ö†Ô∏è MANEJO DE FALLOS AUTOM√ÅTICO:
   * ===============================
   * - Si servidor no responde ‚Üí Cambia autom√°ticamente a modo dispositivo
   * - Inicia timer de reconexi√≥n en segundo plano
   * - Garantiza que currentTime se actualice siempre (con hora local)
   * - NO bloquea el reloj visual, nunca deja al usuario sin hora
   * 
   * üîÑ COMPORTAMIENTO ESPERADO:
   * ==========================
   * - √âxito: currentTime = hora exacta del servidor
   * - Error: isServerConnected = false + inicia reconexi√≥n + usa hora local
   * - El usuario ve cambio de icono inmediato (verde ‚Üí rojo)
   * 
   * üìä FLUJO DE RECUPERACI√ìN ANTE FALLAS:
   * ====================================
   * [Servidor OK] ‚Üí Actualiza hora ‚Üí Sigue consultando cada segundo
   * [Servidor falla] ‚Üí isServerConnected=false ‚Üí Inicia timer reconexi√≥n ‚Üí Usa hora local
   */
  private getServerTimeNow() {
    // Consulta HTTP directa al servidor (sin cache, sin suscripciones)
    this.timeService.forceSyncWithServer().subscribe({
      next: (serverTime) => {
        // ‚úÖ √âXITO: Servidor respondi√≥ correctamente
        this.currentTime = new Date(serverTime.timestamp);
        
        // ‚úÖ ACTUALIZAR SERVICIO CENTRALIZADO CON HORA DEL SERVIDOR
        // Todos los componentes obtendr√°n esta hora precisa para marcaciones
        this.clockService.updateCurrentTime(this.currentTime);
        this.clockService.updateServerConnectionStatus(true, 'Hora del servidor (precisa)');
      },
      error: (error) => {
        // ‚ùå FALLA: Servidor no disponible o error de red
        console.warn('üî¥ SERVIDOR FALL√ì - Cambiando a hora del dispositivo:', error.message || 'Error desconocido');
        
        // PASO 1: Cambiar inmediatamente a modo dispositivo
        this.isServerConnected = false; // ‚Üê Esto cambia el icono a rojo
        this.currentTime = new Date();  // ‚Üê Esto garantiza que la hora se actualice
        
        // ‚úÖ ACTUALIZAR SERVICIO CENTRALIZADO CON HORA DEL DISPOSITIVO
        this.clockService.updateCurrentTime(this.currentTime);
        this.clockService.updateServerConnectionStatus(false, 'Servidor desconectado - usando hora local');
        
        // PASO 2: Activar sistema de reconexi√≥n autom√°tica
        this.startReconnectionTimer();
      }
    });
  }

  // ==================================================================================
  // üîó SISTEMA DE CONEXI√ìN Y RECONEXI√ìN AL SERVIDOR
  // ==================================================================================
  
  /**
   * üöÄ INTENTAR CONEXI√ìN AL SERVIDOR - USADO EN INICIO Y RECONEXI√ìN
   * 
   * üéØ CU√ÅNDO SE USA:
   * =================
   * 1. Al inicializar el componente (ngOnInit)
   * 2. Durante reconexi√≥n autom√°tica cada 10 segundos
   * 3. NUNCA se debe llamar manualmente desde otros lugares
   * 
   * üõ°Ô∏è PROTECCI√ìN CONTRA M√öLTIPLES INTENTOS:
   * ========================================
   * - isAttemptingConnection evita requests duplicados simult√°neos
   * - Si ya hay un intento en curso, sale inmediatamente
   * - Previene condiciones de carrera y sobrecarga del servidor
   * 
   * üìä FLUJO COMPLETO:
   * ==================
   * [Llamada] ‚Üí ¬øYa intentando? ‚Üí S√≠: Salir / No: Continuar
   *    ‚Üì
   * [HTTP Request] ‚Üí ¬ø√âxito? ‚Üí S√≠: Modo servidor + detener reconexi√≥n
   *    ‚Üì                     ‚Üí No: Modo dispositivo + iniciar reconexi√≥n
   * [Limpiar flag]
   * 
   * ‚ö†Ô∏è EFECTOS SECUNDARIOS IMPORTANTES:
   * ==================================
   * - Cambia isServerConnected (afecta icono y fuente de tiempo)
   * - Puede iniciar o detener timer de reconexi√≥n
   * - Actualiza currentTime inmediatamente
   * - Logs para debugging y monitoreo
   */
  private attemptServerConnection() {
    // PASO 1: Verificar si ya hay un intento en curso (prevenir duplicados)
    if (this.isAttemptingConnection) {
      console.log('‚ö†Ô∏è Ya hay un intento de conexi√≥n en curso, saltando...');
      return;
    }
    
    // PASO 2: Marcar como "intentando" para prevenir m√∫ltiples requests
    this.isAttemptingConnection = true;
    console.log('üîÑ ========== INICIANDO INTENTO DE CONEXI√ìN ==========');
    
    // PASO 3: Hacer request HTTP al servidor
    this.timeService.forceSyncWithServer().subscribe({
      next: (serverTime) => {
        // ‚úÖ √âXITO: Servidor est√° disponible y respondi√≥ correctamente
        console.log('üü¢ ========== SERVIDOR CONECTADO EXITOSAMENTE ==========');
        console.log('üü¢ Cambiando a modo servidor - hora precisa para marcaciones');
        
        // Activar modo servidor
        this.isServerConnected = true;           // ‚Üê Cambia icono a verde
        this.currentTime = new Date(serverTime.timestamp); // ‚Üê Sincroniza hora inicial
        this.isAttemptingConnection = false;     // ‚Üê Liberar flag de protecci√≥n
        
        // ‚úÖ ACTUALIZAR SERVICIO CENTRALIZADO - SERVIDOR CONECTADO
        this.clockService.updateCurrentTime(this.currentTime);
        this.clockService.updateServerConnectionStatus(true, 'Servidor conectado - hora precisa');
        
        // Detener reconexi√≥n autom√°tica (ya no es necesaria)
        this.stopReconnectionTimer();
      },
      error: (error) => {
        // ‚ùå ERROR: Servidor no disponible, ca√≠do o error de red
        console.warn('üî¥ ========== SERVIDOR NO DISPONIBLE ==========');
        console.warn('üî¥ Usando hora del dispositivo como fallback');
        console.warn('üî¥ Error:', error.message || 'Error desconocido');
        
        // Activar modo dispositivo
        this.isServerConnected = false;          // ‚Üê Cambia icono a rojo  
        this.currentTime = new Date();           // ‚Üê Usar hora local
        this.isAttemptingConnection = false;     // ‚Üê Liberar flag de protecci√≥n
        
        // ‚úÖ ACTUALIZAR SERVICIO CENTRALIZADO - SERVIDOR DESCONECTADO
        this.clockService.updateCurrentTime(this.currentTime);
        this.clockService.updateServerConnectionStatus(false, 'Servidor no disponible - usando hora local');
        
        // Iniciar reconexi√≥n autom√°tica cada 10 segundos
        this.startReconnectionTimer();
      }
    });
  }

  // ==================================================================================
  // üîÑ SISTEMA DE RECONEXI√ìN AUTOM√ÅTICA (TAREA EN SEGUNDO PLANO)
  // ==================================================================================
  
  /**
   * üîÑ INICIAR TIMER DE RECONEXI√ìN - RECUPERACI√ìN AUTOM√ÅTICA CADA 10 SEGUNDOS
   * 
   * üéØ PROP√ìSITO:
   * =============
   * - Intentar reconectar al servidor autom√°ticamente cuando se pierde la conexi√≥n
   * - Funciona en segundo plano sin interferir con el reloj visual
   * - Se detiene autom√°ticamente cuando se reconecta
   * 
   * ‚ö†Ô∏è CONDICIONES DE SEGURIDAD:
   * ============================
   * - NO inicia si ya hay un timer activo (previene duplicados)
   * - NO inicia si el servidor ya est√° conectado (no es necesario)
   * - NO hace intentos si ya hay uno en curso (respeta isAttemptingConnection)
   * 
   * üïê TIMING CR√çTICO:
   * ==================
   * - Intervalo: Exactamente 10 segundos (10000ms)
   * - Inicio: Solo cuando se detecta p√©rdida de conexi√≥n
   * - Detenci√≥n: Autom√°tica al reconectarse exitosamente
   * 
   * üìä COMPORTAMIENTO ESPERADO:
   * ==========================
   * - Usuario ve icono rojo (desconectado)
   * - Timer intenta reconectar cada 10s en segundo plano  
   * - Cuando reconecta: icono cambia a verde + timer se detiene
   * - Durante reconexi√≥n: reloj sigue funcionando con hora local
   * 
   * üîç L√ìGICA INTERNA DEL TIMER:
   * ============================
   * Cada 10 segundos verifica:
   * 1. ¬øSigue desconectado? (isServerConnected = false)
   * 2. ¬øNo hay intento en curso? (isAttemptingConnection = false)
   * Si ambas son true ‚Üí Llama attemptServerConnection()
   */
  private startReconnectionTimer() {
    // PROTECCI√ìN 1: No iniciar si ya hay timer activo
    if (this.reconnectTimer) {
      console.log('‚ö†Ô∏è Timer de reconexi√≥n ya est√° activo, no iniciando duplicado');
      return;
    }
    
    // PROTECCI√ìN 2: No iniciar si ya est√° conectado (no tiene sentido)
    if (this.isServerConnected) {
      console.log('‚ö†Ô∏è Servidor ya conectado, no es necesario timer de reconexi√≥n');
      return;
    }
    
    console.log('üîÑ ========== INICIANDO TIMER DE RECONEXI√ìN ==========');
    console.log('üîÑ Intentar√° reconectar cada 10 segundos en segundo plano');
    
    // Iniciar timer que verifica cada 10 segundos
    this.reconnectTimer = setInterval(() => {
      // Verificar condiciones antes de intentar reconexi√≥n
      if (!this.isServerConnected && !this.isAttemptingConnection) {
        console.log('üîÑ ‚è∞ Timer de reconexi√≥n activado - intentando reconectar...');
        this.attemptServerConnection();
      } else {
        // Log de estado para debugging
        if (this.isServerConnected) {
          console.log('üîÑ ‚úÖ Servidor ya conectado, timer se detendr√° autom√°ticamente');
        }
        if (this.isAttemptingConnection) {
          console.log('üîÑ ‚è≥ Intento de conexi√≥n en curso, esperando resultado...');
        }
      }
    }, 10000); // ‚Üê 10000ms = 10 segundos EXACTOS
  }

  /**
   * ‚èπÔ∏è DETENER TIMER DE RECONEXI√ìN - LIMPIEZA AUTOM√ÅTICA
   * 
   * üéØ CU√ÅNDO SE USA:
   * =================
   * - Cuando el servidor se conecta exitosamente
   * - Durante ngOnDestroy (limpieza de recursos)
   * - Como medida preventiva en attemptServerConnection exitoso
   * 
   * üßπ LIMPIEZA DE RECURSOS:
   * =======================
   * - Detiene el interval de 10 segundos
   * - Libera la referencia del timer (previene memory leaks)
   * - Es seguro llamarlo m√∫ltiples veces (no hace nada si ya est√° detenido)
   * 
   * üìä COMPORTAMIENTO:
   * ==================
   * - Si hay timer activo: Lo detiene + log confirmaci√≥n
   * - Si no hay timer: No hace nada (operaci√≥n segura)
   */
  private stopReconnectionTimer() {
    if (this.reconnectTimer) {
      console.log('‚èπÔ∏è ========== DETENIENDO TIMER DE RECONEXI√ìN ==========');
      console.log('‚èπÔ∏è Servidor conectado - reconexi√≥n autom√°tica ya no necesaria');
      clearInterval(this.reconnectTimer);
      this.reconnectTimer = null; // ‚Üê Importante: liberar referencia
    }
    // Si no hay timer, no hacer nada (operaci√≥n segura)
  }

  // ==================================================================================
  // üßπ LIMPIEZA DE RECURSOS (PREVENCI√ìN DE MEMORY LEAKS)
  // ==================================================================================
  
  /**
   * üßπ DESTRUCTOR DEL COMPONENTE - LIMPIEZA CR√çTICA DE RECURSOS
   * 
   * üéØ RESPONSABILIDAD:
   * ==================
   * - Detener todos los timers activos (prevenir memory leaks)
   * - Liberar todas las referencias de intervals
   * - Garantizar que no queden procesos ejecut√°ndose en segundo plano
   * 
   * ‚ö†Ô∏è IMPORTANCIA CR√çTICA:
   * =======================
   * - Sin esta limpieza: timers seguir√≠an ejecut√°ndose despu√©s de destruir componente
   * - Resultado: Memory leaks + requests innecesarios + posibles errores
   * - Angular llama este m√©todo autom√°ticamente al destruir el componente
   * 
   * üîß RECURSOS A LIMPIAR:
   * =====================
   * 1. clockTimer (timer principal cada 1 segundo)
   * 2. reconnectTimer (timer de reconexi√≥n cada 10 segundos)
   * 
   * üìä ORDEN DE LIMPIEZA:
   * ====================
   * - Orden no importa, pero timer principal primero por claridad
   * - Cada limpieza debe incluir clearInterval + asignar null
   * - stopReconnectionTimer() ya maneja su propia limpieza internamente
   */
  ngOnDestroy() {
    console.log('üßπ ========== DESTRUYENDO COMPONENTE RELOJ ==========');
    console.log('üßπ Iniciando limpieza de recursos para prevenir memory leaks');
    
    // LIMPIEZA 1: Timer principal (el coraz√≥n del reloj)
    if (this.clockTimer) {
      console.log('üßπ Deteniendo timer principal (cada 1 segundo)');
      clearInterval(this.clockTimer);
      this.clockTimer = null;
    }
    
    // LIMPIEZA 2: Timer de reconexi√≥n (segundo plano)
    this.stopReconnectionTimer(); // Ya incluye su propio logging
  }

  // ==================================================================================
  // üìÑ M√âTODOS DE FORMATO PARA DISPLAY (USADOS POR EL TEMPLATE HTML)
  // ==================================================================================
  
  /**
   * üïê FORMATEAR HORA PARA MOSTRAR AL USUARIO
   * 
   * üìã FORMATO DE SALIDA:
   * ====================
   * - Formato: "HH:MM:SS AM/PM" (12 horas con AM/PM)
   * - Ejemplos: "02:30:45 PM", "11:15:30 AM"
   * - Padding con ceros: "09:05:03 AM" (no "9:5:3 AM")
   * 
   * üéØ USO EN TEMPLATE:
   * ==================
   * - {{ formatTime(currentTime) }} en el HTML
   * - Se ejecuta cada segundo cuando currentTime cambia
   * - Debe ser r√°pido y eficiente (no hacer requests HTTP aqu√≠)
   * 
   * ‚ö†Ô∏è IMPORTANTE:
   * ==============
   * - Este m√©todo NO debe consultar servidores ni hacer HTTP requests
   * - Solo formatea la fecha que ya est√° en currentTime
   * - La l√≥gica de obtener la hora est√° en updateCurrentTime()
   */
  formatTime(date: Date): string {
    const hours = date.getHours();       // 0-23 (formato 24 horas)
    const minutes = date.getMinutes();   // 0-59
    const seconds = date.getSeconds();   // 0-59
    const ampm = hours >= 12 ? 'PM' : 'AM'; // Determinar AM/PM
    
    // Convertir a formato 12 horas (1-12 en lugar de 0-23)
    const displayHours = hours % 12 || 12; // 0 se convierte en 12
    
    // Padding con ceros (ej: "09" en lugar de "9")
    const formattedHours = displayHours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    
    return `${formattedHours}:${formattedMinutes}:${formattedSeconds} ${ampm}`;
  }

  /**
   * üìÖ FORMATEAR FECHA PARA MOSTRAR AL USUARIO
   * 
   * üìã FORMATO DE SALIDA:
   * ====================
   * - Formato: "D√≠a, DD Mes YYYY" en espa√±ol
   * - Ejemplo: "Lunes, 15 Septiembre 2025"
   * - Locale: es-PE (espa√±ol de Per√∫)
   * 
   * üéØ USO EN TEMPLATE:
   * ==================
   * - {{ formatDate(currentTime) }} en el HTML
   * - Se ejecuta cada segundo, pero fecha cambia solo una vez al d√≠a
   * - Complementa el formatTime() para mostrar fecha completa
   * 
   * ‚ö†Ô∏è IMPORTANTE:
   * ==============
   * - Como formatTime(), este m√©todo NO debe hacer HTTP requests
   * - Solo formatea la fecha que ya est√° en currentTime
   * - Usa Intl.DateTimeFormat para internacionalizaci√≥n correcta
   */
  formatDate(date: Date): string {
    const options: Intl.DateTimeFormatOptions = {
      weekday: 'long',    // "Lunes", "Martes", etc.
      year: 'numeric',    // "2025"
      month: 'long',      // "Septiembre", "Octubre", etc.
      day: 'numeric'      // "15", "28", etc.
    };
    
    return date.toLocaleDateString('es-PE', options); // Espa√±ol de Per√∫
  }
}
